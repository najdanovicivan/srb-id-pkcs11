const std = @import("std");

const GEMALTO_ATR_1 = [_]u8{
    0x3B, 0xFF, 0x94, 0x00, 0x00, 0x81, 0x31, 0x80,
    0x43, 0x80, 0x31, 0x80, 0x65, 0xB0, 0x85, 0x02,
    0x01, 0xF3, 0x12, 0x0F, 0xFF, 0x82, 0x90, 0x00,
    0x79,
};

const GEMALTO_ATR_2 = [_]u8{
    0x3B, 0xF9, 0x96, 0x00, 0x00, 0x80, 0x31, 0xFE,
    0x45, 0x53, 0x43, 0x45, 0x37, 0x20, 0x47, 0x43,
    0x4E, 0x33, 0x5E,
};

const GEMALTO_ATR_3 = [_]u8{
    0x3B, 0x9E, 0x96, 0x80, 0x31, 0xFE, 0x45, 0x53,
    0x43, 0x45, 0x20, 0x38, 0x2E, 0x30, 0x2D, 0x43,
    0x31, 0x56, 0x30, 0x0D, 0x0A, 0x6F,
};

const GEMALTO_ATR_4 = [_]u8{
    0x3B, 0x9E, 0x96, 0x80, 0x31, 0xFE, 0x45, 0x53,
    0x43, 0x45, 0x20, 0x38, 0x2E, 0x30, 0x2D, 0x43,
    0x32, 0x56, 0x30, 0x0D, 0x0A, 0x6C,
};

pub fn validATR(atr: []const u8) bool {
    const gemalto_atrs = [4][]const u8{ &GEMALTO_ATR_1, &GEMALTO_ATR_2, &GEMALTO_ATR_3, &GEMALTO_ATR_4 };

    for (gemalto_atrs) |gemalto_atr| {
        if (std.mem.eql(u8, gemalto_atr, atr))
            return true;
    }

    return false;
}
